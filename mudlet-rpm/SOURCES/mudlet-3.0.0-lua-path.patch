--- src/TLuaInterpreter.cpp	2017-03-16 04:36:55.000000000 +0000
+++ src/TLuaInterpreter.cpp	2017-03-16 15:54:30.210216636 +0000
@@ -13293,36 +13293,19 @@
 
 void TLuaInterpreter::loadGlobal()
 {
-# // Load relatively to MacOS inside Resources when we're in a .app bundle,
-# // as mudlet-lua always gets copied in by the build script into the bundle
-#if defined(Q_OS_MAC)
-    QString path = QCoreApplication::applicationDirPath() + "/../Resources/mudlet-lua/lua/LuaGlobal.lua";
-#else
-    QString path = "../src/mudlet-lua/lua/LuaGlobal.lua";
-    // Additional "../src/" allows location of lua code when object code is in a
-    // directory alongside src directory as occurs using Qt Creator "Shadow Builds"
-#endif
-
+    // For the installer we do not go down a level to search for this. So
+    // we check again for the user case of a windows install.
+    QString path = "/usr/share/mudlet/mudlet-lua/lua/LuaGlobal.lua";
     int error = luaL_dofile( pGlobalLua, path.toLatin1().data() );
-    if( error != 0 )
-    {
-        // For the installer we do not go down a level to search for this. So
-        // we check again for the user case of a windows install.
-#if QT_VERSION >= 0x050200
-        // overload previous behaviour to check by absolute path as well
-        // TODO this sould be cleaned up and refactored to just use an array and a for loop
-        path = QCoreApplication::applicationDirPath() + "/mudlet-lua/lua/LuaGlobal.lua";
-        if ( ! QFileInfo::exists(path) ) {
-            path = "mudlet-lua/lua/LuaGlobal.lua";
-        }
-#else
-        path = "mudlet-lua/lua/LuaGlobal.lua";
-#endif
-        error = luaL_dofile( pGlobalLua, path.toLatin1().data() );
-        if( error == 0 ) {
-            mpHost->postMessage( "[  OK  ]  - Mudlet-lua API & Geyser Layout manager loaded." );
-            return;
+    if( error != 0 ) {
+        string e = "no error message available from Lua";
+        if( lua_isstring( pGlobalLua, -1 ) )
+        {
+            e = "[ ERROR ] - LuaGlobal.lua compile error - please report!\n"
+                            "Error from Lua: ";
+            e += lua_tostring( pGlobalLua, -1 );
         }
+        mpHost->mTelnet.postMessage( e.c_str() );
     }
     else
     {
